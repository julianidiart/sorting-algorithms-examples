{"version":3,"sources":["serviceWorker.js","contexts/NumbersContext.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/insertionSort.js","components/NumbersContainer/index.js","components/ButtonsContainer/index.js","components/ConfigurationContainer/index.js","pages/SortingAlgorithmsExamples/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Context","createContext","NumbersStore","props","useState","numbers","setNumbers","showBars","setShowBars","quantity","setQuantity","rangeFrom","setRangeFrom","rangeTo","setRangeTo","speed","setSpeed","sorting","setSorting","useEffect","generateRandomNumbers","numbersArray","i","push","id","uniqueID","value","getRandomNumber","classes","chr4","Math","random","toString","slice","min","max","ceil","floor","performAnimations","animations","forEach","animation","index","setTimeout","movingNumbers","undefined","toIndex","aux","console","log","length","Provider","handleSelectionSort","selectionSortAnimations","smallest","j","selectionSort","handleInsertionSort","insertionSortAnimations","key","insertionSort","onChangeQuantity","target","onChangeRangeFrom","onChangeRangeTo","onChangeSpeed","children","NumbersContainer","context","useContext","NumbersContext","onDragEnd","result","destination","items","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","droppableId","direction","provided","className","ref","innerRef","droppableProps","map","number","draggableId","snapshot","draggableProps","dragHandleProps","isDragging","style","height","placeholder","ButtonsContainer","onClick","disabled","ConfigurationContainer","NubersContext","onChange","step","width","type","SortingAlgorithmsExample","ReactDOM","render","SortingAlgorithmsExamples","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4c85307.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { createContext, useState, useEffect } from \"react\";\nimport selectionSort from \"../sortingAlgorithms/selectionSort\";\nimport insertionSort from \"../sortingAlgorithms/insertionSort\";\n\nconst Context = createContext([]);\nexport const NumbersStore = props => {\n  const [numbers, setNumbers] = useState([]);\n  const [showBars, setShowBars] = useState(false);\n  const [quantity, setQuantity] = useState(10);\n  const [rangeFrom, setRangeFrom] = useState(0);\n  const [rangeTo, setRangeTo] = useState(99);\n  const [speed, setSpeed] = useState(1);\n  const [sorting, setSorting] = useState(false);\n  useEffect(() => {\n    generateRandomNumbers();\n    // eslint-disable-next-line\n  }, [quantity, rangeFrom, rangeTo]);\n  const generateRandomNumbers = () => {\n    const numbersArray = [];\n    for (let i = 0; i < quantity; i++) {\n      numbersArray.push({\n        id: uniqueID(),\n        value: getRandomNumber(rangeFrom, rangeTo),\n        classes: \"\"\n      });\n    }\n    setNumbers(numbersArray);\n  };\n  const uniqueID = () => {\n    function chr4() {\n      return Math.random()\n        .toString(16)\n        .slice(-4);\n    }\n    return (\n      chr4() +\n      chr4() +\n      \"-\" +\n      chr4() +\n      \"-\" +\n      chr4() +\n      \"-\" +\n      chr4() +\n      \"-\" +\n      chr4() +\n      chr4() +\n      chr4()\n    );\n  };\n  const getRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n  const handleSelectionSort = () => {\n    const selectionSortAnimations = selectionSort(numbers);\n    performAnimations(selectionSortAnimations);\n  };\n  const handleInsertionSort = () => {\n    const insertionSortAnimations = insertionSort(numbers);\n    performAnimations(insertionSortAnimations);\n  };\n  const performAnimations = animations => {\n    setSorting(true);\n    animations.forEach((animation, index) => {\n      setTimeout(() => {\n        let movingNumbers = [...numbers];\n        movingNumbers[animation.index].classes = animation.classes;\n        if (animation.toIndex !== undefined) {\n          const aux = movingNumbers[animation.toIndex].value;\n          movingNumbers[animation.toIndex].value =\n            movingNumbers[animation.index].value;\n          movingNumbers[animation.index].value = aux;\n        }\n        setNumbers(movingNumbers);\n      }, index * (500 / speed));\n    });\n    setTimeout(() => {\n      setSorting(false);\n      console.log(sorting);\n    }, animations.length * (500 / speed));\n  };\n  const onChangeQuantity = ({ target }) => {\n    setQuantity(target.value);\n  };\n  const onChangeRangeFrom = ({ target }) => {\n    setRangeFrom(target.value);\n  };\n  const onChangeRangeTo = ({ target }) => {\n    setRangeTo(target.value);\n  };\n  const onChangeSpeed = ({ target }) => {\n    setSpeed(target.value);\n  };\n  return (\n    <Context.Provider\n      value={{\n        generateRandomNumbers,\n        handleSelectionSort,\n        handleInsertionSort,\n        numbers,\n        onChangeQuantity,\n        onChangeRangeFrom,\n        onChangeRangeTo,\n        onChangeSpeed,\n        quantity,\n        rangeFrom,\n        rangeTo,\n        setNumbers,\n        setShowBars,\n        showBars,\n        speed,\n        sorting\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport default Context;\n","export default numbers => {\n  let animations = [];\n  numbers = [...numbers];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (i > 0) {\n      animations.push({\n        index: i - 1,\n        classes: \"\"\n      });\n    }\n    animations.push({\n      index: i,\n      classes: \"sorting--selected\"\n    });\n    let smallest = i;\n    for (let j = i + 1; j < numbers.length; j++) {\n      animations.push({\n        index: j,\n        classes: \"sorting--checking\"\n      });\n      if (numbers[j].value < numbers[smallest].value) {\n        if (smallest !== i) {\n          animations.push({\n            index: smallest,\n            classes: \"\"\n          });\n        }\n        smallest = j;\n        animations.push({\n          index: j,\n          classes: \"sorting--smallest\"\n        });\n      } else {\n        animations.push({\n          index: j,\n          classes: \"\"\n        });\n      }\n    }\n    if (smallest !== i) {\n      animations.push({\n        index: smallest,\n        toIndex: i,\n        classes: \"\"\n      });\n    }\n    const aux = numbers[i];\n    numbers[i] = numbers[smallest];\n    numbers[smallest] = aux;\n  }\n  animations.push({\n    index: numbers.length - 2,\n    classes: \"\"\n  });\n  return animations;\n};\n","export default numbers => {\n  let animations = [];\n  numbers = [...numbers];\n  for (let i = 1; i < numbers.length; i++) {\n    animations.push({\n      index: i - 1,\n      classes: \"\"\n    });\n    animations.push({\n      index: i,\n      classes: \"sorting--selected\"\n    });\n    let key = numbers[i],\n      j = i - 1;\n    while (j >= 0 && numbers[j].value > key.value) {\n      animations.push({\n        index: j + 1,\n        classes: \"sorting--selected\"\n      });\n      animations.push({\n        index: j,\n        classes: \"sorting--checking\"\n      });\n      animations.push({\n        index: j,\n        classes: \"sorting--smallest\"\n      });\n      numbers[j + 1] = numbers[j];\n      animations.push({\n        index: j + 1,\n        classes: \"\"\n      });\n      animations.push({\n        index: j,\n        toIndex: j + 1,\n        classes: \"\"\n      });\n      j--;\n    }\n    animations.push({\n      index: j + 1,\n      classes: \"\"\n    });\n    numbers[j + 1] = key;\n  }\n  return animations;\n};\n","import React, { useContext } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport NumbersContext from \"../../contexts/NumbersContext\";\n\nconst NumbersContainer = () => {\n  const context = useContext(NumbersContext);\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  };\n  const onDragEnd = result => {\n    if (!result.destination) return;\n\n    const items = reorder(\n      context.numbers,\n      result.source.index,\n      result.destination.index\n    );\n\n    context.setNumbers(items);\n  };\n  return (\n    <>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {provided => (\n            <div\n              className=\"numbers-container\"\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n            >\n              {context.numbers.map((number, index) => (\n                <Draggable\n                  key={number.id}\n                  draggableId={number.id}\n                  index={index}\n                >\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      className={number.classes}\n                    >\n                      <div\n                        className={\n                          snapshot.isDragging\n                            ? \"number number--dragging\"\n                            : \"number\"\n                        }\n                      >\n                        {number.value}\n                      </div>\n                      {context.showBars && (\n                        <div\n                          className={\n                            snapshot.isDragging\n                              ? \"number-bar number-bar--dragging\"\n                              : \"number-bar\"\n                          }\n                          style={{ height: `${number.value * 2}px` }}\n                        ></div>\n                      )}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default NumbersContainer;\n","import React, { useContext } from \"react\";\nimport NumbersContext from \"../../contexts/NumbersContext\";\n\nconst ButtonsContainer = () => {\n  const context = useContext(NumbersContext);\n  return (\n    <>\n      <div className=\"buttons-container\">\n        <button\n          className=\"button\"\n          onClick={() => context.setShowBars(!context.showBars)}\n        >\n          {context.showBars ? \"Hide\" : \"Show\"} bars\n        </button>\n        <button\n          className=\"button\"\n          onClick={context.generateRandomNumbers}\n          disabled={context.sorting}\n        >\n          Generate random numbers\n        </button>\n      </div>\n      <div className=\"buttons-container\">\n        <button\n          className=\"button\"\n          onClick={context.handleSelectionSort}\n          disabled={context.sorting}\n        >\n          Selection sort\n        </button>\n        <button\n          className=\"button\"\n          onClick={context.handleInsertionSort}\n          disabled={context.sorting}\n        >\n          Insertion sort\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ButtonsContainer;\n","import React, { useContext } from \"react\";\nimport NubersContext from \"../../contexts/NumbersContext\";\n\nconst ConfigurationContainer = () => {\n  const context = useContext(NubersContext);\n  return (\n    <div className=\"buttons-container buttons-container--configuration\">\n      <div>Sorting</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        min=\"2\"\n        onChange={context.onChangeQuantity}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.quantity).length * 17}px` }}\n        type=\"number\"\n        value={context.quantity}\n      />\n      <div>numbers from</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        min=\"0\"\n        onChange={context.onChangeRangeFrom}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.rangeFrom).length * 17}px` }}\n        type=\"number\"\n        value={context.rangeFrom}\n      />\n      <div>to</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        min=\"0\"\n        onChange={context.onChangeRangeTo}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.rangeTo).length * 17}px` }}\n        type=\"number\"\n        value={context.rangeTo}\n      />\n      <div>at</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        min=\"1\"\n        onChange={context.onChangeSpeed}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.speed).length * 17}px` }}\n        type=\"number\"\n        value={context.speed}\n      />\n      <div>x speed.</div>\n    </div>\n  );\n};\n\nexport default ConfigurationContainer;\n","import React from \"react\";\nimport NumbersContainer from \"../../components/NumbersContainer\";\nimport ButtonsContainer from \"../../components/ButtonsContainer\";\nimport ConfigurationContainer from \"../../components/ConfigurationContainer\";\nimport { NumbersStore } from \"../../contexts/NumbersContext\";\n\nconst SortingAlgorithmsExample = () => {\n  return (\n    <NumbersStore>\n      <div className=\"page-container\">\n        <h1>Sorting Algorithms Examples</h1>\n        <ConfigurationContainer />\n        <NumbersContainer />\n        <ButtonsContainer />\n      </div>\n    </NumbersStore>\n  );\n};\n\nexport default SortingAlgorithmsExample;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport SortingAlgorithmsExamples from \"./pages/SortingAlgorithmsExamples\";\nimport \"./styles/styles.scss\";\n\nReactDOM.render(<SortingAlgorithmsExamples />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}