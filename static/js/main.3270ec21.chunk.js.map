{"version":3,"sources":["serviceWorker.js","sortingAlgorithms/mergeSort.js","contexts/NumbersContext.js","sortingAlgorithms/insertionSort.js","sortingAlgorithms/selectionSort.js","components/NumbersContainer/index.js","components/ButtonsContainer/index.js","components/ConfigurationContainer/index.js","pages/SortingAlgorithmsExamples/index.js","index.js"],"names":["Boolean","window","location","hostname","match","merge","numbers","p","q","r","animations","leftPart","slice","concat","value","Number","MAX_VALUE","rightPart","push","classes","index","merging","mergignValue","multiple","toIndex","i","j","k","mergingValue","mergeSort","length","Math","floor","Context","createContext","NumbersStore","props","useState","setNumbers","quantity","setQuantity","rangeFrom","setRangeFrom","rangeTo","setRangeTo","showBars","setShowBars","speed","setSpeed","sorting","setSorting","useEffect","generateRandomNumbers","numbersArray","id","uniqueID","getRandomNumber","chr4","random","toString","min","max","ceil","performAnimations","forEach","setTimeout","movingNumbers","undefined","aux","Provider","handleInsertionSort","insertionSortAnimations","key","insertionSort","handleMergeSort","numbersToSort","mergeSortAnimations","console","log","handleSelectionSort","selectionSortAnimations","smallest","selectionSort","onChangeQuantity","target","onChangeRangeFrom","onChangeRangeTo","onChangeSpeed","children","NumbersContainer","context","useContext","NumbersContext","onDragEnd","result","destination","items","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","droppableId","direction","provided","className","ref","innerRef","droppableProps","map","number","draggableId","snapshot","draggableProps","dragHandleProps","isDragging","style","height","placeholder","ButtonsContainer","onClick","disabled","ConfigurationContainer","NubersContext","onChange","step","width","type","SortingAlgorithmsExample","ReactDOM","render","SortingAlgorithmsExamples","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3270ec21.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const mergeSort = (numbers, p = 0, r = numbers.length - 1, animations = []) => {\n  if (p >= r) return;\n  const q = Math.floor((p + r) / 2);\n  mergeSort(numbers, p, q, animations);\n  mergeSort(numbers, q + 1, r, animations);\n  return merge(numbers, p, q, r, animations);\n};\n\nconst merge = (numbers, p, q, r, animations) => {\n  const leftPart = numbers.slice(p, q + 1).concat({ value: Number.MAX_VALUE });\n  const rightPart = numbers\n    .slice(q + 1, r + 1)\n    .concat({ value: Number.MAX_VALUE });\n  animations.push({\n    classes: \"sorting--selected\",\n    index: p,\n    merging: true,\n    mergignValue: null,\n    multiple: true,\n    toIndex: q + 1\n  });\n  animations.push({\n    classes: \"sorting--selected-right\",\n    index: q + 1,\n    merging: true,\n    mergignValue: null,\n    multiple: true,\n    toIndex: r + 1\n  });\n  let i = 0,\n    j = 0;\n  for (let k = p; k <= r; k++) {\n    if (leftPart[i].value <= rightPart[j].value) {\n      animations.push({\n        index: i + p,\n        classes: \"sorting--smallest\"\n      });\n      animations.push({\n        index: k,\n        mergingValue: leftPart[i].value\n      });\n      numbers[k] = leftPart[i];\n      i++;\n    } else {\n      animations.push({\n        index: j + q + 1,\n        classes: \"sorting--smallest\"\n      });\n      animations.push({\n        index: k,\n        mergingValue: rightPart[j].value\n      });\n      numbers[k] = rightPart[j];\n      j++;\n    }\n  }\n  animations.push({\n    classes: \"\",\n    index: p,\n    merging: false,\n    multiple: true,\n    toIndex: r + 1\n  });\n  return animations;\n};\n\nexport default mergeSort;\n","import React, { createContext, useState, useEffect } from \"react\";\nimport selectionSort from \"../sortingAlgorithms/selectionSort\";\nimport insertionSort from \"../sortingAlgorithms/insertionSort\";\nimport mergeSort from \"../sortingAlgorithms/mergeSort\";\n\nconst Context = createContext([]);\nexport const NumbersStore = props => {\n  const [numbers, setNumbers] = useState([]);\n  const [quantity, setQuantity] = useState(10);\n  const [rangeFrom, setRangeFrom] = useState(0);\n  const [rangeTo, setRangeTo] = useState(99);\n  const [showBars, setShowBars] = useState(false);\n  const [speed, setSpeed] = useState(1);\n  const [sorting, setSorting] = useState(false);\n  useEffect(() => {\n    generateRandomNumbers();\n    // eslint-disable-next-line\n  }, [quantity, rangeFrom, rangeTo]);\n  const generateRandomNumbers = () => {\n    const numbersArray = [];\n    for (let i = 0; i < quantity; i++) {\n      numbersArray.push({\n        id: uniqueID(),\n        value: getRandomNumber(rangeFrom, rangeTo),\n        classes: \"\",\n        merging: false,\n        mergignValue: null\n      });\n    }\n    setNumbers(numbersArray);\n  };\n  const uniqueID = () => {\n    function chr4() {\n      return Math.random()\n        .toString(16)\n        .slice(-4);\n    }\n    return (\n      chr4() +\n      chr4() +\n      \"-\" +\n      chr4() +\n      \"-\" +\n      chr4() +\n      \"-\" +\n      chr4() +\n      \"-\" +\n      chr4() +\n      chr4() +\n      chr4()\n    );\n  };\n  const getRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n  const handleSelectionSort = () => {\n    const numbersToSort = [...numbers];\n    const selectionSortAnimations = selectionSort(numbersToSort);\n    performAnimations(selectionSortAnimations);\n  };\n  const handleInsertionSort = () => {\n    const numbersToSort = [...numbers];\n    const insertionSortAnimations = insertionSort(numbersToSort);\n    performAnimations(insertionSortAnimations);\n  };\n  const handleMergeSort = () => {\n    const numbersToSort = [...numbers];\n    const mergeSortAnimations = mergeSort(numbersToSort);\n    console.log(mergeSortAnimations);\n    performAnimations(mergeSortAnimations);\n  };\n  const performAnimations = animations => {\n    setSorting(true);\n    animations.forEach(\n      ({ classes, index, toIndex, multiple, merging, mergingValue }, i) => {\n        setTimeout(() => {\n          let movingNumbers = [...numbers];\n          if (multiple) {\n            for (let i = index; i < toIndex; i++) {\n              movingNumbers[i].merging = merging;\n              if (merging === false)\n                movingNumbers[i].value = movingNumbers[i].mergingValue;\n              movingNumbers[i].mergingValue = mergingValue;\n              movingNumbers[i].classes = classes;\n            }\n          } else {\n            if (merging) movingNumbers[index].merging = merging;\n            if (mergingValue) movingNumbers[index].mergingValue = mergingValue;\n            if (classes !== undefined) movingNumbers[index].classes = classes;\n            if (toIndex !== undefined) {\n              const aux = movingNumbers[toIndex].value;\n              movingNumbers[toIndex].value = movingNumbers[index].value;\n              movingNumbers[index].value = aux;\n            }\n          }\n          setNumbers(movingNumbers);\n        }, i * (500 / speed));\n      }\n    );\n    setTimeout(() => {\n      setSorting(false);\n    }, animations.length * (500 / speed));\n  };\n  const onChangeQuantity = ({ target }) => {\n    if (+target.value < 2 || target.value === \"\") setQuantity(2);\n    else if (+target.value > 99) setQuantity(99);\n    else setQuantity(target.value);\n  };\n  const onChangeRangeFrom = ({ target }) => {\n    if (+target.value < 0 || target.value === \"\") setRangeFrom(0);\n    else setRangeFrom(target.value);\n  };\n  const onChangeRangeTo = ({ target }) => {\n    setRangeTo(target.value);\n  };\n  const onChangeSpeed = ({ target }) => {\n    setSpeed(target.value);\n  };\n  return (\n    <Context.Provider\n      value={{\n        generateRandomNumbers,\n        handleInsertionSort,\n        handleMergeSort,\n        handleSelectionSort,\n        numbers,\n        onChangeQuantity,\n        onChangeRangeFrom,\n        onChangeRangeTo,\n        onChangeSpeed,\n        quantity,\n        rangeFrom,\n        rangeTo,\n        setNumbers,\n        setShowBars,\n        showBars,\n        speed,\n        sorting\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport default Context;\n","export default numbers => {\n  let animations = [];\n  // numbers = [...numbers];\n  for (let i = 1; i < numbers.length; i++) {\n    animations.push({\n      index: i - 1,\n      classes: \"\"\n    });\n    animations.push({\n      index: i,\n      classes: \"sorting--selected\"\n    });\n    let key = numbers[i],\n      j = i - 1;\n    while (j >= 0 && numbers[j].value > key.value) {\n      animations.push({\n        index: j + 1,\n        classes: \"sorting--selected\"\n      });\n      animations.push({\n        index: j,\n        classes: \"sorting--checking\"\n      });\n      animations.push({\n        index: j,\n        classes: \"sorting--smallest\"\n      });\n      numbers[j + 1] = numbers[j];\n      animations.push({\n        index: j + 1,\n        classes: \"\"\n      });\n      animations.push({\n        index: j,\n        toIndex: j + 1,\n        classes: \"\"\n      });\n      j--;\n    }\n    animations.push({\n      index: j + 1,\n      classes: \"\"\n    });\n    numbers[j + 1] = key;\n  }\n  return animations;\n};\n","export default numbers => {\n  let animations = [];\n  // numbers = [...numbers];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (i > 0) {\n      animations.push({\n        index: i - 1,\n        classes: \"\"\n      });\n    }\n    animations.push({\n      index: i,\n      classes: \"sorting--selected\"\n    });\n    let smallest = i;\n    for (let j = i + 1; j < numbers.length; j++) {\n      animations.push({\n        index: j,\n        classes: \"sorting--checking\"\n      });\n      if (numbers[j].value < numbers[smallest].value) {\n        if (smallest !== i) {\n          animations.push({\n            index: smallest,\n            classes: \"\"\n          });\n        }\n        smallest = j;\n        animations.push({\n          index: j,\n          classes: \"sorting--smallest\"\n        });\n      } else {\n        animations.push({\n          index: j,\n          classes: \"\"\n        });\n      }\n    }\n    if (smallest !== i) {\n      animations.push({\n        index: smallest,\n        toIndex: i,\n        classes: \"\"\n      });\n    }\n    const aux = numbers[i];\n    numbers[i] = numbers[smallest];\n    numbers[smallest] = aux;\n  }\n  animations.push({\n    index: numbers.length - 2,\n    classes: \"\"\n  });\n  return animations;\n};\n","import React, { useContext } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport NumbersContext from \"../../contexts/NumbersContext\";\n\nconst NumbersContainer = () => {\n  const context = useContext(NumbersContext);\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  };\n  const onDragEnd = result => {\n    if (!result.destination) return;\n\n    const items = reorder(\n      context.numbers,\n      result.source.index,\n      result.destination.index\n    );\n\n    context.setNumbers(items);\n  };\n  return (\n    <>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {provided => (\n            <div\n              className=\"numbers-container\"\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n            >\n              {context.numbers.map((number, index) => (\n                <Draggable\n                  key={number.id}\n                  draggableId={number.id}\n                  index={index}\n                >\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      className={number.classes}\n                    >\n                      {number.merging && (\n                        <div className=\"number number--merge-value\">\n                          {number.mergingValue}\n                        </div>\n                      )}\n                      <div\n                        className={\n                          snapshot.isDragging\n                            ? \"number number--dragging\"\n                            : \"number\"\n                        }\n                      >\n                        {number.value}\n                      </div>\n                      {context.showBars && (\n                        <div\n                          className={\n                            snapshot.isDragging\n                              ? \"number-bar number-bar--dragging\"\n                              : \"number-bar\"\n                          }\n                          style={{ height: `${number.value * 2}px` }}\n                        ></div>\n                      )}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default NumbersContainer;\n","import React, { useContext } from \"react\";\nimport NumbersContext from \"../../contexts/NumbersContext\";\n\nconst ButtonsContainer = () => {\n  const context = useContext(NumbersContext);\n  return (\n    <>\n      <div className=\"buttons-container\">\n        <button\n          className=\"button\"\n          onClick={() => context.setShowBars(!context.showBars)}\n        >\n          {context.showBars ? \"Hide\" : \"Show\"} bars\n        </button>\n        <button\n          className=\"button\"\n          onClick={context.generateRandomNumbers}\n          disabled={context.sorting}\n        >\n          Generate random numbers\n        </button>\n      </div>\n      <div className=\"buttons-container\">\n        <button\n          className=\"button\"\n          onClick={context.handleSelectionSort}\n          disabled={context.sorting}\n        >\n          Selection sort\n        </button>\n        <button\n          className=\"button\"\n          onClick={context.handleInsertionSort}\n          disabled={context.sorting}\n        >\n          Insertion sort\n        </button>\n        <button\n          className=\"button\"\n          onClick={context.handleMergeSort}\n          disabled={context.sorting}\n        >\n          Merge sort\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ButtonsContainer;\n","import React, { useContext } from \"react\";\nimport NubersContext from \"../../contexts/NumbersContext\";\n\nconst ConfigurationContainer = () => {\n  const context = useContext(NubersContext);\n  return (\n    <div className=\"buttons-container buttons-container--configuration\">\n      <div>Sorting</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        max=\"99\"\n        min=\"2\"\n        onChange={context.onChangeQuantity}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.quantity).length * 17}px` }}\n        type=\"number\"\n        value={context.quantity}\n      />\n      <div>numbers from</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        min=\"0\"\n        onChange={context.onChangeRangeFrom}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.rangeFrom).length * 17}px` }}\n        type=\"number\"\n        value={context.rangeFrom}\n      />\n      <div>to</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        min=\"0\"\n        onChange={context.onChangeRangeTo}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.rangeTo).length * 17}px` }}\n        type=\"number\"\n        value={context.rangeTo}\n      />\n      <div>at</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        min=\"1\"\n        onChange={context.onChangeSpeed}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.speed).length * 17}px` }}\n        type=\"number\"\n        value={context.speed}\n      />\n      <div>x speed.</div>\n    </div>\n  );\n};\n\nexport default ConfigurationContainer;\n","import React from \"react\";\nimport NumbersContainer from \"../../components/NumbersContainer\";\nimport ButtonsContainer from \"../../components/ButtonsContainer\";\nimport ConfigurationContainer from \"../../components/ConfigurationContainer\";\nimport { NumbersStore } from \"../../contexts/NumbersContext\";\n\nconst SortingAlgorithmsExample = () => {\n  return (\n    <NumbersStore>\n      <div className=\"page-container\">\n        <h1>Sorting Algorithms Examples</h1>\n        <ConfigurationContainer />\n        <NumbersContainer />\n        <ButtonsContainer />\n      </div>\n    </NumbersStore>\n  );\n};\n\nexport default SortingAlgorithmsExample;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport SortingAlgorithmsExamples from \"./pages/SortingAlgorithmsExamples\";\nimport \"./styles/styles.scss\";\n\nReactDOM.render(<SortingAlgorithmsExamples />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}