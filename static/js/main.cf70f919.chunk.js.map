{"version":3,"sources":["serviceWorker.js","utils/index.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quicksort.js","contexts/NumbersContext.js","sortingAlgorithms/insertionSort.js","sortingAlgorithms/selectionSort.js","components/NumbersContainer/index.js","components/ButtonsContainer/index.js","components/ConfigurationContainer/index.js","pages/SortingAlgorithmsExamples/index.js","index.js"],"names":["Boolean","window","location","hostname","match","uniqueID","chr4","Math","random","toString","slice","merge","numbers","p","q","r","animations","leftPart","concat","value","Number","MAX_VALUE","rightPart","push","classes","index","merging","mergignValue","multiple","toIndex","i","j","k","mergingValue","mergeSort","length","floor","partition","u","aux","quicksort","Context","createContext","NumbersStore","props","useState","setNumbers","quantity","setQuantity","rangeFrom","setRangeFrom","rangeTo","setRangeTo","showBars","setShowBars","speed","setSpeed","sorting","setSorting","useEffect","generateRandomNumbers","min","max","numbersArray","id","ceil","performAnimations","forEach","setTimeout","movingNumbers","undefined","Provider","handleInsertionSort","insertionSortAnimations","key","insertionSort","handleMergeSort","numbersToSort","mergeSortAnimations","handleSelectionSort","selectionSortAnimations","smallest","selectionSort","handleQuicksort","quicksortAnimations","onChangeQuantity","target","onChangeRangeFrom","onChangeRangeTo","onChangeSpeed","children","NumbersContainer","context","useContext","NumbersContext","onDragEnd","result","destination","items","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","droppableId","direction","provided","className","ref","innerRef","droppableProps","map","number","draggableId","snapshot","draggableProps","dragHandleProps","isDragging","style","height","placeholder","ButtonsContainer","onClick","disabled","ConfigurationContainer","NubersContext","onChange","step","width","type","SortingAlgorithmsExample","ReactDOM","render","SortingAlgorithmsExamples","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf70f919.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const uniqueID = () => {\n  function chr4() {\n    return Math.random()\n      .toString(16)\n      .slice(-4);\n  }\n  return (\n    chr4() +\n    chr4() +\n    \"-\" +\n    chr4() +\n    \"-\" +\n    chr4() +\n    \"-\" +\n    chr4() +\n    \"-\" +\n    chr4() +\n    chr4() +\n    chr4()\n  );\n};\n\nexport const getRandomNumber = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n","const mergeSort = (numbers, p = 0, r = numbers.length - 1, animations = []) => {\n  if (p >= r) return;\n  const q = Math.floor((p + r) / 2);\n  mergeSort(numbers, p, q, animations);\n  mergeSort(numbers, q + 1, r, animations);\n  return merge(numbers, p, q, r, animations);\n};\n\nconst merge = (numbers, p, q, r, animations) => {\n  const leftPart = numbers.slice(p, q + 1).concat({ value: Number.MAX_VALUE });\n  const rightPart = numbers\n    .slice(q + 1, r + 1)\n    .concat({ value: Number.MAX_VALUE });\n  animations.push({\n    classes: \"sorting--selected\",\n    index: p,\n    merging: true,\n    mergignValue: null,\n    multiple: true,\n    toIndex: q + 1\n  });\n  animations.push({\n    classes: \"sorting--selected-right\",\n    index: q + 1,\n    merging: true,\n    mergignValue: null,\n    multiple: true,\n    toIndex: r + 1\n  });\n  let i = 0,\n    j = 0;\n  for (let k = p; k <= r; k++) {\n    if (leftPart[i].value <= rightPart[j].value) {\n      animations.push({\n        index: i + p,\n        classes: \"sorting--smallest\"\n      });\n      animations.push({\n        index: k,\n        mergingValue: leftPart[i].value\n      });\n      numbers[k] = leftPart[i];\n      i++;\n    } else {\n      animations.push({\n        index: j + q + 1,\n        classes: \"sorting--smallest\"\n      });\n      animations.push({\n        index: k,\n        mergingValue: rightPart[j].value\n      });\n      numbers[k] = rightPart[j];\n      j++;\n    }\n  }\n  animations.push({\n    classes: \"\",\n    index: p,\n    merging: false,\n    multiple: true,\n    toIndex: r + 1\n  });\n  return animations;\n};\n\nexport default mergeSort;\n","const quicksort = (numbers, p = 0, r = numbers.length - 1, animations = []) => {\n  if (p >= r) return;\n  const q = partition(numbers, p, r, animations);\n  quicksort(numbers, p, q - 1, animations);\n  quicksort(numbers, q + 1, r, animations);\n  return animations;\n};\n\nconst partition = (numbers, p, r, animations) => {\n  animations.push({\n    index: p,\n    toIndex: r + 1,\n    multiple: true,\n    classes: \"sorting--selected\"\n  });\n  let q = p;\n  for (let u = p; u <= r - 1; u++) {\n    if (numbers[u].value <= numbers[r].value) {\n      animations.push({\n        index: q,\n        toIndex: u,\n        classes: \"sorting--selected\"\n      });\n      const aux = numbers[q];\n      numbers[q] = numbers[u];\n      numbers[u] = aux;\n      q++;\n    }\n  }\n  animations.push({\n    index: q,\n    toIndex: r,\n    classes: \"sorting--selected\"\n  });\n  const aux = numbers[q];\n  numbers[q] = numbers[r];\n  numbers[r] = aux;\n  animations.push({\n    index: p,\n    toIndex: r + 1,\n    multiple: true,\n    classes: \"\"\n  });\n  return q;\n};\n\nexport default quicksort;\n","import React, { createContext, useState, useEffect } from \"react\";\nimport { uniqueID, getRandomNumber } from \"../utils\";\nimport selectionSort from \"../sortingAlgorithms/selectionSort\";\nimport insertionSort from \"../sortingAlgorithms/insertionSort\";\nimport mergeSort from \"../sortingAlgorithms/mergeSort\";\nimport quicksort from \"../sortingAlgorithms/quicksort\";\n\nconst Context = createContext([]);\nexport const NumbersStore = props => {\n  const [numbers, setNumbers] = useState([]);\n  const [quantity, setQuantity] = useState(10);\n  const [rangeFrom, setRangeFrom] = useState(0);\n  const [rangeTo, setRangeTo] = useState(99);\n  const [showBars, setShowBars] = useState(false);\n  const [speed, setSpeed] = useState(1);\n  const [sorting, setSorting] = useState(false);\n  useEffect(() => {\n    generateRandomNumbers();\n    // eslint-disable-next-line\n  }, [quantity, rangeFrom, rangeTo]);\n  const generateRandomNumbers = () => {\n    const numbersArray = [];\n    for (let i = 0; i < quantity; i++) {\n      numbersArray.push({\n        id: uniqueID(),\n        value: getRandomNumber(rangeFrom, rangeTo),\n        classes: \"\",\n        merging: false,\n        mergignValue: null\n      });\n    }\n    setNumbers(numbersArray);\n  };\n  const handleSelectionSort = () => {\n    const numbersToSort = [...numbers];\n    const selectionSortAnimations = selectionSort(numbersToSort);\n    performAnimations(selectionSortAnimations);\n  };\n  const handleInsertionSort = () => {\n    const numbersToSort = [...numbers];\n    const insertionSortAnimations = insertionSort(numbersToSort);\n    performAnimations(insertionSortAnimations);\n  };\n  const handleMergeSort = () => {\n    const numbersToSort = [...numbers];\n    const mergeSortAnimations = mergeSort(numbersToSort);\n    performAnimations(mergeSortAnimations);\n  };\n  const handleQuicksort = () => {\n    const numbersToSort = [...numbers];\n    const quicksortAnimations = quicksort(numbersToSort);\n    performAnimations(quicksortAnimations);\n  };\n  const performAnimations = animations => {\n    setSorting(true);\n    animations.forEach(\n      ({ classes, index, toIndex, multiple, merging, mergingValue }, i) => {\n        setTimeout(() => {\n          let movingNumbers = [...numbers];\n          if (multiple) {\n            for (let i = index; i < toIndex; i++) {\n              movingNumbers[i].merging = merging;\n              if (merging === false)\n                movingNumbers[i].value = movingNumbers[i].mergingValue;\n              movingNumbers[i].mergingValue = mergingValue;\n              movingNumbers[i].classes = classes;\n            }\n          } else {\n            if (merging) movingNumbers[index].merging = merging;\n            if (mergingValue) movingNumbers[index].mergingValue = mergingValue;\n            if (classes !== undefined) movingNumbers[index].classes = classes;\n            if (toIndex !== undefined) {\n              const aux = movingNumbers[toIndex].value;\n              movingNumbers[toIndex].value = movingNumbers[index].value;\n              movingNumbers[index].value = aux;\n            }\n          }\n          setNumbers(movingNumbers);\n        }, i * (500 / speed));\n      }\n    );\n    setTimeout(() => {\n      setSorting(false);\n    }, animations.length * (500 / speed));\n  };\n  const onChangeQuantity = ({ target }) => {\n    if (+target.value < 2 || target.value === \"\") setQuantity(2);\n    else if (+target.value > 99) setQuantity(99);\n    else setQuantity(target.value);\n  };\n  const onChangeRangeFrom = ({ target }) => {\n    if (+target.value < 0 || target.value === \"\") setRangeFrom(0);\n    else setRangeFrom(target.value);\n  };\n  const onChangeRangeTo = ({ target }) => {\n    setRangeTo(target.value);\n  };\n  const onChangeSpeed = ({ target }) => {\n    setSpeed(target.value);\n  };\n  return (\n    <Context.Provider\n      value={{\n        generateRandomNumbers,\n        handleInsertionSort,\n        handleMergeSort,\n        handleSelectionSort,\n        handleQuicksort,\n        numbers,\n        onChangeQuantity,\n        onChangeRangeFrom,\n        onChangeRangeTo,\n        onChangeSpeed,\n        quantity,\n        rangeFrom,\n        rangeTo,\n        setNumbers,\n        setShowBars,\n        showBars,\n        speed,\n        sorting\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport default Context;\n","export default numbers => {\n  let animations = [];\n  // numbers = [...numbers];\n  for (let i = 1; i < numbers.length; i++) {\n    animations.push({\n      index: i - 1,\n      classes: \"\"\n    });\n    animations.push({\n      index: i,\n      classes: \"sorting--selected\"\n    });\n    let key = numbers[i],\n      j = i - 1;\n    while (j >= 0 && numbers[j].value > key.value) {\n      animations.push({\n        index: j + 1,\n        classes: \"sorting--selected\"\n      });\n      animations.push({\n        index: j,\n        classes: \"sorting--checking\"\n      });\n      animations.push({\n        index: j,\n        classes: \"sorting--smallest\"\n      });\n      numbers[j + 1] = numbers[j];\n      animations.push({\n        index: j + 1,\n        classes: \"\"\n      });\n      animations.push({\n        index: j,\n        toIndex: j + 1,\n        classes: \"\"\n      });\n      j--;\n    }\n    animations.push({\n      index: j + 1,\n      classes: \"\"\n    });\n    numbers[j + 1] = key;\n  }\n  return animations;\n};\n","export default numbers => {\n  let animations = [];\n  // numbers = [...numbers];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (i > 0) {\n      animations.push({\n        index: i - 1,\n        classes: \"\"\n      });\n    }\n    animations.push({\n      index: i,\n      classes: \"sorting--selected\"\n    });\n    let smallest = i;\n    for (let j = i + 1; j < numbers.length; j++) {\n      animations.push({\n        index: j,\n        classes: \"sorting--checking\"\n      });\n      if (numbers[j].value < numbers[smallest].value) {\n        if (smallest !== i) {\n          animations.push({\n            index: smallest,\n            classes: \"\"\n          });\n        }\n        smallest = j;\n        animations.push({\n          index: j,\n          classes: \"sorting--smallest\"\n        });\n      } else {\n        animations.push({\n          index: j,\n          classes: \"\"\n        });\n      }\n    }\n    if (smallest !== i) {\n      animations.push({\n        index: smallest,\n        toIndex: i,\n        classes: \"\"\n      });\n    }\n    const aux = numbers[i];\n    numbers[i] = numbers[smallest];\n    numbers[smallest] = aux;\n  }\n  animations.push({\n    index: numbers.length - 2,\n    classes: \"\"\n  });\n  return animations;\n};\n","import React, { useContext } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport NumbersContext from \"../../contexts/NumbersContext\";\n\nconst NumbersContainer = () => {\n  const context = useContext(NumbersContext);\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  };\n  const onDragEnd = result => {\n    if (!result.destination) return;\n\n    const items = reorder(\n      context.numbers,\n      result.source.index,\n      result.destination.index\n    );\n\n    context.setNumbers(items);\n  };\n  return (\n    <>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {provided => (\n            <div\n              className=\"numbers-container\"\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n            >\n              {context.numbers.map((number, index) => (\n                <Draggable\n                  key={number.id}\n                  draggableId={number.id}\n                  index={index}\n                >\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      className={number.classes}\n                    >\n                      {number.merging && (\n                        <div className=\"number number--merge-value\">\n                          {number.mergingValue}\n                        </div>\n                      )}\n                      <div\n                        className={\n                          snapshot.isDragging\n                            ? \"number number--dragging\"\n                            : \"number\"\n                        }\n                      >\n                        {number.value}\n                      </div>\n                      {context.showBars && (\n                        <div\n                          className={\n                            snapshot.isDragging\n                              ? \"number-bar number-bar--dragging\"\n                              : \"number-bar\"\n                          }\n                          style={{ height: `${number.value * 2}px` }}\n                        ></div>\n                      )}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default NumbersContainer;\n","import React, { useContext } from \"react\";\nimport NumbersContext from \"../../contexts/NumbersContext\";\n\nconst ButtonsContainer = () => {\n  const {\n    generateRandomNumbers,\n    handleInsertionSort,\n    handleMergeSort,\n    handleSelectionSort,\n    handleQuicksort,\n    setShowBars,\n    showBars,\n    sorting\n  } = useContext(NumbersContext);\n  return (\n    <>\n      <div className=\"buttons-container\">\n        <button className=\"button\" onClick={() => setShowBars(!showBars)}>\n          {showBars ? \"Hide\" : \"Show\"} bars\n        </button>\n        <button\n          className=\"button\"\n          onClick={generateRandomNumbers}\n          disabled={sorting}\n        >\n          Generate random numbers\n        </button>\n      </div>\n      <div className=\"buttons-container\">\n        <button\n          className=\"button\"\n          onClick={handleSelectionSort}\n          disabled={sorting}\n        >\n          Selection sort\n        </button>\n        <button\n          className=\"button\"\n          onClick={handleInsertionSort}\n          disabled={sorting}\n        >\n          Insertion sort\n        </button>\n        <button className=\"button\" onClick={handleMergeSort} disabled={sorting}>\n          Merge sort\n        </button>\n        <button className=\"button\" onClick={handleQuicksort} disabled={sorting}>\n          Quicksort\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ButtonsContainer;\n","import React, { useContext } from \"react\";\nimport NubersContext from \"../../contexts/NumbersContext\";\n\nconst ConfigurationContainer = () => {\n  const context = useContext(NubersContext);\n  return (\n    <div className=\"buttons-container buttons-container--configuration\">\n      <div>Sorting</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        max=\"99\"\n        min=\"2\"\n        onChange={context.onChangeQuantity}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.quantity).length * 17}px` }}\n        type=\"number\"\n        value={context.quantity}\n      />\n      <div>numbers from</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        min=\"0\"\n        onChange={context.onChangeRangeFrom}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.rangeFrom).length * 17}px` }}\n        type=\"number\"\n        value={context.rangeFrom}\n      />\n      <div>to</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        min=\"0\"\n        onChange={context.onChangeRangeTo}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.rangeTo).length * 17}px` }}\n        type=\"number\"\n        value={context.rangeTo}\n      />\n      <div>at</div>\n      <input\n        className=\"config-number\"\n        disabled={context.sorting}\n        min=\"1\"\n        onChange={context.onChangeSpeed}\n        step=\"1\"\n        style={{ width: `${(\"\" + context.speed).length * 17}px` }}\n        type=\"number\"\n        value={context.speed}\n      />\n      <div>x speed.</div>\n    </div>\n  );\n};\n\nexport default ConfigurationContainer;\n","import React from \"react\";\nimport NumbersContainer from \"../../components/NumbersContainer\";\nimport ButtonsContainer from \"../../components/ButtonsContainer\";\nimport ConfigurationContainer from \"../../components/ConfigurationContainer\";\nimport { NumbersStore } from \"../../contexts/NumbersContext\";\n\nconst SortingAlgorithmsExample = () => {\n  return (\n    <NumbersStore>\n      <div className=\"page-container\">\n        <h1>Sorting Algorithms Examples</h1>\n        <ConfigurationContainer />\n        <NumbersContainer />\n        <ButtonsContainer />\n      </div>\n    </NumbersStore>\n  );\n};\n\nexport default SortingAlgorithmsExample;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport SortingAlgorithmsExamples from \"./pages/SortingAlgorithmsExamples\";\nimport \"./styles/styles.scss\";\n\nReactDOM.render(<SortingAlgorithmsExamples />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}