{"version":3,"sources":["serviceWorker.js","components/NumberItem/index.js","components/NumbersContainer/index.js","pages/SortingAlgorithmsExamples/index.js","index.js"],"names":["Boolean","window","location","hostname","match","NumberItem","key","value","className","NumbersContainer","useState","numbers","setNumbers","useEffect","generateRandomNumbers","numbersArray","i","push","getRandomNumber","min","max","Math","ceil","floor","random","map","number","onClick","SortingAlgorithmsExample","ReactDOM","render","SortingAlgorithmsExamples","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCVSC,EANI,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,MAAR,OACjB,yBAAKC,UAAU,SAASF,IAAKA,GAC1BC,ICiCUE,EAlCU,WAAO,IAAD,EACCC,mBAAS,IADV,mBACtBC,EADsB,KACbC,EADa,KAE7BC,qBAAU,WACRC,MAEC,IACH,IAAMA,EAAwB,WAE5B,IADA,IAAMC,EAAe,GACZC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAaE,KAAKC,EAAgB,EAAG,KAEvCN,EAAWG,IAEPG,EAAkB,SAACC,EAAKC,GAG5B,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,GAEvD,OACE,oCACE,yBAAKX,UAAU,qBACZG,EAAQc,KAAI,SAACC,EAAQV,GAAT,OACX,kBAAC,EAAD,CAAYV,IAAKU,EAAGT,MAAOmB,QAG/B,yBAAKlB,UAAU,qBACb,4BAAQA,UAAU,SAASmB,QAASb,GAApC,8BCjBOc,EATkB,WAC/B,OACE,yBAAKpB,UAAU,kBACb,2DACA,kBAAC,EAAD,Q,KCDNqB,IAASC,OAAO,kBAACC,EAAD,MAA+BC,SAASC,eAAe,SJ2HjE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a204608e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst NumberItem = ({ key, value }) => (\n  <div className=\"number\" key={key}>\n    {value}\n  </div>\n);\n\nexport default NumberItem;\n","import React, { useState, useEffect } from \"react\";\nimport NumberItem from \"../NumberItem\";\n\nconst NumbersContainer = () => {\n  const [numbers, setNumbers] = useState([]);\n  useEffect(() => {\n    generateRandomNumbers();\n    // eslint-disable-next-line\n  }, []);\n  const generateRandomNumbers = () => {\n    const numbersArray = [];\n    for (let i = 0; i < 10; i++) {\n      numbersArray.push(getRandomNumber(0, 99));\n    }\n    setNumbers(numbersArray);\n  };\n  const getRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n  return (\n    <>\n      <div className=\"numbers-container\">\n        {numbers.map((number, i) => (\n          <NumberItem key={i} value={number} />\n        ))}\n      </div>\n      <div className=\"numbers-container\">\n        <button className=\"button\" onClick={generateRandomNumbers}>\n          Generate random numbers\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default NumbersContainer;\n","import React from \"react\";\nimport NumbersContainer from \"../../components/NumbersContainer\";\n\nconst SortingAlgorithmsExample = () => {\n  return (\n    <div className=\"page-container\">\n      <h1>Sorting Algorithms Examples</h1>\n      <NumbersContainer />\n    </div>\n  );\n};\n\nexport default SortingAlgorithmsExample;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport SortingAlgorithmsExamples from \"./pages/SortingAlgorithmsExamples\";\nimport \"./styles/styles.scss\";\n\nReactDOM.render(<SortingAlgorithmsExamples />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}